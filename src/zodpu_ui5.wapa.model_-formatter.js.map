{"version":3,"file":"formatter.js","names":["__exports","formatJSON","sValue","jsonObj","JSON","parse","stringify"],"sources":["formatter.ts"],"sourcesContent":["/**\n * Formatter for the OData Client application\n */\nexport default {\n\t/**\n\t * Forma+
ts a JSON string with proper indentation\n\t * @param sValue - The JSON string or object to format\n\t * @returns The formatted JSON string\n\t */\n\tformatJSON(sValue: string | object | null | undefined): string {\n\t\tif (!sValue) {\n\t\t\treturn \"\";+
\n\t\t}\n\t\ttry {\n\t\t\t// If the value is already a string, parse it first\n\t\t\tconst jsonObj: unknown =\n\t\t\t\ttypeof sValue === \"string\" ? JSON.parse(sValue) : sValue;\n\t\t\t// Format with 4 spaces indentation\n\t\t\treturn JSON.stringify(jso+
nObj, null, 4);\n\t\t} catch {\n\t\t\t// If parsing fails, return the original value\n\t\t\treturn typeof sValue === \"string\" ? sValue : JSON.stringify(sValue);\n\t\t}\n\t},\n};\n"],"mappings":"yCAAA,IAAAA,EAGe,CAMdC,WAAWC,GACV,IAAKA,EAAQ,CACZ,MAAO,EAC+
R,CACA,IAEC,MAAMC,SACED,IAAW,SAAWE,KAAKC,MAAMH,GAAUA,EAEnD,OAAOE,KAAKE,UAAUH,EAAS,KAAM,EACtC,CAAE,MAED,cAAcD,IAAW,SAAWA,EAASE,KAAKE,UAAUJ,EAC7D,CACD,GACA,OAAAF,CAAA","ignoreList":[]}                                                                         