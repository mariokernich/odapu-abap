{"version":3,"file":"formatter-dbg.js","names":["__exports","formatJSON","sValue","jsonObj","JSON","parse","stringify"],"sources":["formatter.ts"],"sourcesContent":["/**\n * Formatter for the OData Client application\n */\nexport default {\n\t/**\n\t * F+
ormats a JSON string with proper indentation\n\t * @param sValue - The JSON string or object to format\n\t * @returns The formatted JSON string\n\t */\n\tformatJSON(sValue: string | object | null | undefined): string {\n\t\tif (!sValue) {\n\t\t\treturn \+
"\";\n\t\t}\n\t\ttry {\n\t\t\t// If the value is already a string, parse it first\n\t\t\tconst jsonObj: unknown =\n\t\t\t\ttypeof sValue === \"string\" ? JSON.parse(sValue) : sValue;\n\t\t\t// Format with 4 spaces indentation\n\t\t\treturn JSON.stringify+
(jsonObj, null, 4);\n\t\t} catch {\n\t\t\t// If parsing fails, return the original value\n\t\t\treturn typeof sValue === \"string\" ? sValue : JSON.stringify(sValue);\n\t\t}\n\t},\n};\n"],"mappings":";;;EAAA;AACA;AACA;EAFA,IAAAA,SAAA,GAGe;IACd;AACD;AACA;+
AACA;AACA;IACCC,UAAUA,CAACC,MAA0C,EAAU;MAC9D,IAAI,CAACA,MAAM,EAAE;QACZ,OAAO,EAAE;MACV;MACA,IAAI;QACH;QACA,MAAMC,OAAgB,GACrB,OAAOD,MAAM,KAAK,QAAQ,GAAGE,IAAI,CAACC,KAAK,CAACH,MAAM,CAAC,GAAGA,MAAM;QACzD;QACA,OAAOE,IAAI,CAACE,SAAS,CAACH,OAAO,EAAE,IAAI,EAAE,C+
AAC,CAAC;MACxC,CAAC,CAAC,MAAM;QACP;QACA,OAAO,OAAOD,MAAM,KAAK,QAAQ,GAAGA,MAAM,GAAGE,IAAI,CAACE,SAAS,CAACJ,MAAM,CAAC;MACpE;IACD;EACD,CAAC;EAAA,OAAAF,SAAA;AAAA","ignoreList":[]}                                                                                 